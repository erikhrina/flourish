// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/plant_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 593960518857412797),
      name: 'PlantModel',
      lastPropertyId: const obx_int.IdUid(13, 4197379929296324061),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9121770181334197890),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2862126174370070572),
            name: 'latin',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6323333729223998362),
            name: 'family',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 576993249872743023),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6594866912854924910),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 9043792514220250729),
            name: 'tempMax',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6959516055117268809),
            name: 'tempMin',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 793569223688330305),
            name: 'idealLight',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7811296336753733712),
            name: 'toleratedLight',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7668758491477443896),
            name: 'watering',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2822363054208502234),
            name: 'saved',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 225668392898466327),
            name: 'lastWatered',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4197379929296324061),
            name: 'recent',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 593960518857412797),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    PlantModel: obx_int.EntityDefinition<PlantModel>(
        model: _entities[0],
        toOneRelations: (PlantModel object) => [],
        toManyRelations: (PlantModel object) => {},
        getId: (PlantModel object) => object.id,
        setId: (PlantModel object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field PlantModel.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (PlantModel object, fb.Builder fbb) {
          final latinOffset = fbb.writeString(object.latin);
          final familyOffset = fbb.writeString(object.family);
          final nameOffset = fbb.writeString(object.name);
          final categoryOffset = fbb.writeString(object.category);
          final idealLightOffset = fbb.writeString(object.idealLight);
          final toleratedLightOffset = fbb.writeString(object.toleratedLight);
          final wateringOffset = fbb.writeString(object.watering);
          final lastWateredOffset = object.lastWatered == null
              ? null
              : fbb.writeString(object.lastWatered!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, latinOffset);
          fbb.addOffset(2, familyOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, categoryOffset);
          fbb.addInt64(5, object.tempMax);
          fbb.addInt64(6, object.tempMin);
          fbb.addOffset(7, idealLightOffset);
          fbb.addOffset(8, toleratedLightOffset);
          fbb.addOffset(9, wateringOffset);
          fbb.addBool(10, object.saved);
          fbb.addOffset(11, lastWateredOffset);
          fbb.addBool(12, object.recent);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final latinParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final familyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final tempMaxParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final tempMinParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final idealLightParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final toleratedLightParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final wateringParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final savedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final recentParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final lastWateredParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 26);
          final object = PlantModel(
              id: idParam,
              latin: latinParam,
              family: familyParam,
              name: nameParam,
              category: categoryParam,
              tempMax: tempMaxParam,
              tempMin: tempMinParam,
              idealLight: idealLightParam,
              toleratedLight: toleratedLightParam,
              watering: wateringParam,
              saved: savedParam,
              recent: recentParam,
              lastWatered: lastWateredParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [PlantModel] entity fields to define ObjectBox queries.
class PlantModel_ {
  /// See [PlantModel.id].
  static final id =
      obx.QueryIntegerProperty<PlantModel>(_entities[0].properties[0]);

  /// See [PlantModel.latin].
  static final latin =
      obx.QueryStringProperty<PlantModel>(_entities[0].properties[1]);

  /// See [PlantModel.family].
  static final family =
      obx.QueryStringProperty<PlantModel>(_entities[0].properties[2]);

  /// See [PlantModel.name].
  static final name =
      obx.QueryStringProperty<PlantModel>(_entities[0].properties[3]);

  /// See [PlantModel.category].
  static final category =
      obx.QueryStringProperty<PlantModel>(_entities[0].properties[4]);

  /// See [PlantModel.tempMax].
  static final tempMax =
      obx.QueryIntegerProperty<PlantModel>(_entities[0].properties[5]);

  /// See [PlantModel.tempMin].
  static final tempMin =
      obx.QueryIntegerProperty<PlantModel>(_entities[0].properties[6]);

  /// See [PlantModel.idealLight].
  static final idealLight =
      obx.QueryStringProperty<PlantModel>(_entities[0].properties[7]);

  /// See [PlantModel.toleratedLight].
  static final toleratedLight =
      obx.QueryStringProperty<PlantModel>(_entities[0].properties[8]);

  /// See [PlantModel.watering].
  static final watering =
      obx.QueryStringProperty<PlantModel>(_entities[0].properties[9]);

  /// See [PlantModel.saved].
  static final saved =
      obx.QueryBooleanProperty<PlantModel>(_entities[0].properties[10]);

  /// See [PlantModel.lastWatered].
  static final lastWatered =
      obx.QueryStringProperty<PlantModel>(_entities[0].properties[11]);

  /// See [PlantModel.recent].
  static final recent =
      obx.QueryBooleanProperty<PlantModel>(_entities[0].properties[12]);
}
